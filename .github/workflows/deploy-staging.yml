name: Deploy Staging

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout do código
      - name: Checkout código
        uses: actions/checkout@v3

      # 2) Login no Docker Hub
      - name: Login no Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # 3) Build e push da imagem Docker
      - name: Build e Push da imagem
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/core-service:staging .
          docker push ${{ secrets.DOCKER_USERNAME }}/core-service:staging

      # 4) Deploy via SSH (Homolog)
      - name: Deploy no Staging (VPS)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          env:
            DATABASE_URL_HOMOLOG: ${{ secrets.DATABASE_URL_HOMOLOG }}
          script: |
            echo "DATABASE_URL_HOMOLOG is: $DATABASE_URL_HOMOLOG"

            # Se a var chegar aqui vazia, conserte o Secret ou a syntax
            export DATABASE_URL="${DATABASE_URL_HOMOLOG}"
            echo "DATABASE_URL is: $DATABASE_URL"

            docker pull myuser/core-service:staging
            docker stop core_service_staging || true
            docker rm core_service_staging || true

            docker run --rm \
              --network=projects_default \
              -e DATABASE_URL="$DATABASE_URL" \
              myuser/core-service:staging \
              npx prisma migrate deploy

            docker run -d \
              --network=projects_default \
              -e DATABASE_URL="$DATABASE_URL" \
              --name core_service_staging \
              -p 3335:3334 \
              myuser/core-service:staging
